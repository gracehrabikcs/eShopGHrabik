@page "/user/login"
@inject NavigationManager Nav
@attribute [Authorize]
@code {
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Default return URL to root if none is provided
        var returnUrl = ReturnUrl ?? "/";

        try
        {
            // Debugging: Log the returnUrl for verification
            Console.WriteLine($"ReturnUrl: {returnUrl}");

            // Validate the returnUrl
            if (string.IsNullOrWhiteSpace(returnUrl) || returnUrl.StartsWith("http", StringComparison.OrdinalIgnoreCase))
            {
                // Redirect to root if returnUrl is invalid or absolute
                Nav.NavigateTo("/");
            }
            else
            {
                // Safely navigate to relative returnUrl
                Nav.NavigateTo(returnUrl);
            }
        }
        catch (Exception ex)
        {
            // Log any navigation errors and navigate to root as fallback
            Console.WriteLine($"Navigation error: {ex.Message}");
            Nav.NavigateTo("/");
        }

        await base.OnInitializedAsync();
    }

    public static string Url(NavigationManager nav)
        => $"user/login?returnUrl={Uri.EscapeDataString(nav.ToBaseRelativePath(nav.Uri))}";
}
